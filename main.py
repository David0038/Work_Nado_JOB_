import os
import asyncio
import datetime
import requests
import uuid
from aiogram import Bot, Dispatcher, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from fastapi import FastAPI, Request
import uvicorn

API_TOKEN = "8394026180:AAEHHKn30U7H_zdHWGu_cB2h9054lmo1eag"
YOOKASSA_SHOP_ID = "1179735"
YOOKASSA_SECRET = "test_J8y43wGt8go7fyMtkNNWUGlMdTmVtV41bd82cVmMpQk"

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
app = FastAPI()

roles = {}
subscriptions = {}
orders = {}
order_steps = {}
pending_payments = {}

main_menu_customer = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –í–∞–∫–∞–Ω—Å–∏–∏")],
        [KeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")],
        [KeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")]
    ],
    resize_keyboard=True
)

main_menu_worker = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üìã –í–∞–∫–∞–Ω—Å–∏–∏")]],
    resize_keyboard=True
)

back_button = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
    resize_keyboard=True
)

def has_active_subscription(user_id: int) -> bool:
    return subscriptions.get(user_id, datetime.datetime.min) > datetime.datetime.now()

@dp.message(Command("start"))
async def start(message: Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üëî –Ø –∑–∞–∫–∞–∑—á–∏–∫")],
            [KeyboardButton(text="üë§ –Ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WorkNadoJobBot!\n\nüíº –ó–¥–µ—Å—å –∑–∞–∫–∞–∑—á–∏–∫–∏ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –Ω–∞—Ö–æ–¥—è—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞.",
        reply_markup=kb
    )

@dp.message(F.text == "üëî –Ø –∑–∞–∫–∞–∑—á–∏–∫")
async def choose_customer(message: Message):
    roles[message.from_user.id] = "customer"
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞.", reply_markup=main_menu_customer)

@dp.message(F.text == "üë§ –Ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å")
async def choose_worker(message: Message):
    roles[message.from_user.id] = "worker"
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.", reply_markup=main_menu_worker)

@dp.message(F.text == "üìã –í–∞–∫–∞–Ω—Å–∏–∏")
async def show_vacancies(message: Message):
    role = roles.get(message.from_user.id)
    if role == "customer" and not has_active_subscription(message.from_user.id):
        await message.answer("‚ùå –î–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 1000 ‚ÇΩ.", reply_markup=main_menu_customer)
        return
    if not orders:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.", reply_markup=back_button)
        return
    kb = InlineKeyboardMarkup()
    for order_id, order in orders.items():
        kb.add(InlineKeyboardButton(text=f"{order['title']} ‚Äî {order['price']} ‚ÇΩ", callback_data=f"order_{order_id}"))
    await message.answer("‚úÖ –°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π:", reply_markup=kb)

@dp.callback_query(F.data.startswith("order_"))
async def order_detail(callback):
    order_id = callback.data.split("_")[1]
    order = orders.get(order_id)
    if not order:
        await callback.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    text = (f"üìã *{order['title']}*\n"
            f"üí∞ –û–ø–ª–∞—Ç–∞: {order['price']} ‚ÇΩ\n"
            f"‚è∞ –°—Ä–æ–∫: {order['deadline']}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {order['description']}")
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton(text="‚úÖ –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f"apply_{order_id}"))
    await callback.message.edit_text(text, reply_markup=kb, parse_mode="Markdown")

@dp.callback_query(F.data.startswith("apply_"))
async def apply_order(callback):
    order_id = callback.data.split("_")[1]
    order = orders.get(order_id)
    if order:
        customer_id = order['customer_id']
        await bot.send_message(customer_id, f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å @{callback.from_user.username} –æ—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è –Ω–∞ –≤–∞—à –∑–∞–∫–∞–∑ '{order['title']}'!")
        await callback.answer("–û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

@dp.message(F.text == "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
async def create_order(message: Message):
    if roles.get(message.from_user.id) != "customer":
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—á–∏–∫–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã.", reply_markup=main_menu_customer)
        return
    if not has_active_subscription(message.from_user.id):
        await message.answer("‚ùå –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞.", reply_markup=main_menu_customer)
        return
    order_steps[message.from_user.id] = {"step": "title"}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:", reply_markup=back_button)

@dp.message()
async def process_order_steps(message: Message):
    step_data = order_steps.get(message.from_user.id)
    if not step_data:
        return
    step = step_data["step"]
    if step == "title":
        step_data["title"] = message.text
        step_data["step"] = "description"
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:")
    elif step == "description":
        step_data["description"] = message.text
        step_data["step"] = "deadline"
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3 –¥–Ω—è):")
    elif step == "deadline":
        step_data["deadline"] = message.text
        step_data["step"] = "price"
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã (–≤ ‚ÇΩ):")
    elif step == "price":
        step_data["price"] = message.text
        order_id = str(uuid.uuid4())
        orders[order_id] = {
            "title": step_data["title"],
            "description": step_data["description"],
            "deadline": step_data["deadline"],
            "price": step_data["price"],
            "customer_id": message.from_user.id
        }
        del order_steps[message.from_user.id]
        await message.answer("‚úÖ –ó–∞–∫–∞–∑ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!", reply_markup=main_menu_customer)

@dp.message(F.text == "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def buy_subscription(message: Message):
    if roles.get(message.from_user.id) != "customer":
        await message.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—á–∏–∫–∞–º.", reply_markup=main_menu_customer)
        return
    amount = "1000.00"
    payment_data = {
        "amount": {"value": amount, "currency": "RUB"},
        "capture": True,
        "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ WorkNadoJobBot (30 –¥–Ω–µ–π)",
        "confirmation": {"type": "redirect", "return_url": "https://t.me/WorkNadoJobBot"},
        "payment_method_data": {"type": "bank_card"},
        "metadata": {"user_id": str(message.from_user.id)}
    }
    headers = {
        "Content-Type": "application/json",
        "Idempotence-Key": str(uuid.uuid4())
    }
    try:
        response = requests.post(
            "https://api.yookassa.ru/v3/payments",
            auth=(YOOKASSA_SHOP_ID, YOOKASSA_SECRET),
            headers=headers,
            json=payment_data,
            timeout=15
        )
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}", reply_markup=main_menu_customer)
        return
    try:
        payment = response.json()
    except Exception:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.", reply_markup=main_menu_customer)
        return
    if response.status_code == 200 and "confirmation" in payment:
        confirmation_url = payment["confirmation"]["confirmation_url"]
        kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –ÆKassa", url=confirmation_url)]])
        sent = await message.answer(f"üí∞ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π ‚Äî {amount} ‚ÇΩ.\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.", reply_markup=kb)
        payment_id = payment.get("id")
        if payment_id:
            pending_payments[payment_id] = (sent.chat.id, sent.message_id, message.from_user.id)
    else:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {payment}", reply_markup=main_menu_customer)

@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def go_back(message: Message):
    role = roles.get(message.from_user.id)
    if role == "customer":
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", reply_markup=main_menu_customer)
    elif role == "worker":
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é.", reply_markup=main_menu_worker)
    else:
        await start(message)

@app.post("/yookassa/callback")
async def yookassa_callback(request: Request):
    data = await request.json()
    if data.get("event") == "payment.succeeded":
        obj = data.get("object", {})
        metadata = obj.get("metadata", {})
        user_id = int(metadata.get("user_id")) if metadata.get("user_id") else None
        payment_id = obj.get("id")
        if user_id:
            subscriptions[user_id] = datetime.datetime.now() + datetime.timedelta(days=30)
            await bot.send_message(user_id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã.", reply_markup=main_menu_customer)
        pending = pending_payments.pop(payment_id, None)
        if pending:
            chat_id, message_id, uid = pending
            try:
                await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)
            except Exception:
                pass
    return {"status": "ok"}

@app.get("/")
async def root():
    return {"status": "WorkNadoJobBot —Ä–∞–±–æ—Ç–∞–µ—Ç üöÄ"}

async def main():
    loop = asyncio.get_event_loop()
    loop.create_task(dp.start_polling(bot))
    config = uvicorn.Config(app, host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
    server = uvicorn.Server(config)
    await server.serve()

if __name__ == "__main__":
    asyncio.run(main())
