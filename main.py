import os
import asyncio
import datetime
import requests
import uuid
import psycopg2
from psycopg2.extras import RealDictCursor
from aiogram import Bot, Dispatcher, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, Message, CallbackQuery
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from fastapi import FastAPI, Request
import uvicorn

API_TOKEN = "8394026180:AAEHHKn30U7H_zdHWGu_cB2h9054lmo1eag"
YOOKASSA_SHOP_ID = "1179735"
YOOKASSA_SECRET = "test_J8y43wGt8go7fyMtkNNWUGlMdTmVtV41bd82cVmMpQk"
DATABASE_URL = "postgresql://worknado_user:0NvvjFmjHWOXny9UdRLUjKYyKTzV5jD0@dpg-d3sgt77gi27c73b798rg-a.oregon-postgres.render.com/worknado_db"  

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
app = FastAPI()

conn = psycopg2.connect(DATABASE_URL, sslmode="require")
cur = conn.cursor(cursor_factory=RealDictCursor)
cur.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id BIGINT PRIMARY KEY,
    role TEXT
);
""")
cur.execute("""
CREATE TABLE IF NOT EXISTS subscriptions (
    user_id BIGINT PRIMARY KEY,
    expires TIMESTAMP
);
""")
cur.execute("""
CREATE TABLE IF NOT EXISTS orders (
    id SERIAL PRIMARY KEY,
    user_id BIGINT,
    description TEXT,
    deadline TEXT,
    created_at TIMESTAMP
);
""")
conn.commit()

main_menu_customer = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üìã –í–∞–∫–∞–Ω—Å–∏–∏")],[KeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")],[KeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")]], resize_keyboard=True)
main_menu_worker = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üìã –í–∞–∫–∞–Ω—Å–∏–∏")]], resize_keyboard=True)
back_button = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]], resize_keyboard=True)

class OrderStates(StatesGroup):
    description = State()
    deadline = State()

def set_role_db(user_id: int, role: str):
    cur.execute("INSERT INTO users (user_id, role) VALUES (%s, %s) ON CONFLICT (user_id) DO UPDATE SET role = EXCLUDED.role;", (user_id, role))
    conn.commit()

def get_role_db(user_id: int):
    cur.execute("SELECT role FROM users WHERE user_id = %s;", (user_id,))
    row = cur.fetchone()
    return row["role"] if row else None

def set_subscription_db(user_id: int, expires: datetime.datetime):
    cur.execute("INSERT INTO subscriptions (user_id, expires) VALUES (%s, %s) ON CONFLICT (user_id) DO UPDATE SET expires = EXCLUDED.expires;", (user_id, expires))
    conn.commit()

def has_active_subscription_db(user_id: int) -> bool:
    cur.execute("SELECT expires FROM subscriptions WHERE user_id = %s;", (user_id,))
    row = cur.fetchone()
    if not row or not row["expires"]:
        return False
    return row["expires"] > datetime.datetime.now()

@dp.message(Command("start"))
async def start(message: Message):
    kb = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="üëî –Ø –∑–∞–∫–∞–∑—á–∏–∫")],[KeyboardButton(text="üë§ –Ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å")]], resize_keyboard=True)
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WorkNadoJobBot!\n\n–í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –≤—ã üëá", reply_markup=kb)

@dp.message(F.text == "üëî –Ø –∑–∞–∫–∞–∑—á–∏–∫")
async def choose_customer(message: Message):
    set_role_db(message.from_user.id, "customer")
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å: üëî –ó–∞–∫–∞–∑—á–∏–∫. –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ç–∫–ª–∏–∫–∏, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É ‚Äî 1000 ‚ÇΩ / 30 –¥–Ω–µ–π.", reply_markup=main_menu_customer)

@dp.message(F.text == "üë§ –Ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å")
async def choose_worker(message: Message):
    set_role_db(message.from_user.id, "worker")
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å: üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å. –í—ã –º–æ–∂–µ—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏.", reply_markup=main_menu_worker)

@dp.message(F.text == "üìã –í–∞–∫–∞–Ω—Å–∏–∏")
async def show_vacancies(message: Message):
    role = get_role_db(message.from_user.id)
    if role == "customer" and not has_active_subscription_db(message.from_user.id):
        await message.answer("‚ùå –î–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 1000 ‚ÇΩ.", reply_markup=main_menu_customer)
        return
    cur.execute("SELECT id, description, deadline, created_at, user_id FROM orders ORDER BY id DESC;")
    rows = cur.fetchall()
    if not rows:
        await message.answer("‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.", reply_markup=back_button)
        return
    for r in rows:
        short = r["description"] if len(r["description"]) < 200 else r["description"][:197] + '...'
        kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"order_{r['id']}")]])
        await message.answer(f"üìå –ó–∞–∫–∞–∑ #{r['id']}\n{short}\n–°—Ä–æ–∫: {r['deadline']}\n–°–æ–∑–¥–∞–ª: {r['user_id']}", reply_markup=kb)

@dp.callback_query(F.data.startswith('order_'))
async def show_order_cb(query: CallbackQuery):
    oid = int(query.data.split('_', 1)[1])
    cur.execute("SELECT id, user_id, description, deadline, created_at FROM orders WHERE id = %s;", (oid,))
    row = cur.fetchone()
    if not row:
        await query.answer('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert=True)
        return
    await query.message.answer(f"üìÑ –ó–∞–∫–∞–∑ #{row['id']}\n{row['description']}\n\n–°—Ä–æ–∫: {row['deadline']}\n–°–æ–∑–¥–∞–Ω: {row['created_at']}\n–ó–∞–∫–∞–∑—á–∏–∫: {row['user_id']}")
    await query.answer()

@dp.message(F.text == "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
async def create_order(message: Message, state: FSMContext):
    role = get_role_db(message.from_user.id)
    if role != "customer":
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—á–∏–∫–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã.", reply_markup=main_menu_customer)
        return
    if not has_active_subscription_db(message.from_user.id):
        await message.answer("‚ùå –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ (1000 ‚ÇΩ).", reply_markup=main_menu_customer)
        return
    await state.set_state(OrderStates.description)
    await message.answer("‚úèÔ∏è –û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑ (–∫–æ—Ä–æ—Ç–∫–æ).", reply_markup=back_button)

@dp.message(OrderStates.description)
async def order_description(message: Message, state: FSMContext):
    if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        await state.clear()
        await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=main_menu_customer)
        return
    await state.update_data(description=message.text)
    await state.set_state(OrderStates.deadline)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3 –¥–Ω—è, 2025-11-01).', reply_markup=back_button)

@dp.message(OrderStates.deadline)
async def order_deadline(message: Message, state: FSMContext):
    if message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        await state.clear()
        await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=main_menu_customer)
        return
    data = await state.get_data()
    desc = data.get('description')
    deadline = message.text
    created_at = datetime.datetime.now()
    cur.execute("INSERT INTO orders (user_id, description, deadline, created_at) VALUES (%s, %s, %s, %s);", (message.from_user.id, desc, deadline, created_at))
    conn.commit()
    await state.clear()
    await message.answer('‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π.', reply_markup=main_menu_customer)

@dp.message(F.text == "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def buy_subscription(message: Message):
    role = get_role_db(message.from_user.id)
    if role != "customer":
        await message.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—á–∏–∫–∞–º.", reply_markup=main_menu_customer)
        return
    amount = "1000.00"
    data = {
        "amount": {"value": amount, "currency": "RUB"},
        "capture": True,
        "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ WorkNadoJobBot (30 –¥–Ω–µ–π)",
        "confirmation": {"type": "redirect", "return_url": "https://t.me/WorkNadoJobBot"},
        "metadata": {"user_id": message.from_user.id}
    }
    idempotence_key = str(uuid.uuid4())
    try:
        response = requests.post("https://api.yookassa.ru/v3/payments", auth=(YOOKASSA_SHOP_ID, YOOKASSA_SECRET), json=data, headers={"Content-Type": "application/json", "Idempotence-Key": idempotence_key}, timeout=15)
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. {e}", reply_markup=main_menu_customer)
        return
    payment = response.json()
    if "confirmation" not in payment:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.\n\n{payment}", reply_markup=main_menu_customer)
        return
    confirmation_url = payment["confirmation"]["confirmation_url"]
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –ÆKassa", url=confirmation_url)]])
    msg = await message.answer(f"üí∞ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π ‚Äî {amount} ‚ÇΩ.\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=kb)
    payment_id = payment.get("id")
    if payment_id:
        for _ in range(10):
            await asyncio.sleep(10)
            check = requests.get(f"https://api.yookassa.ru/v3/payments/{payment_id}", auth=(YOOKASSA_SHOP_ID, YOOKASSA_SECRET))
            js = check.json()
            if js.get("status") == "succeeded":
                expires = datetime.datetime.now() + datetime.timedelta(days=30)
                set_subscription_db(message.from_user.id, expires)
                await msg.edit_text("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π üéâ", reply_markup=None)
                await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏.", reply_markup=main_menu_customer)
                break

@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def go_back(message: Message):
    role = get_role_db(message.from_user.id)
    if role == "customer":
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_customer)
    elif role == "worker":
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu_worker)
    else:
        await start(message)

@app.post("/yookassa/callback")
async def yookassa_callback(request: Request):
    data = await request.json()
    if data.get("event") == "payment.succeeded":
        user_id = int(data["object"]["metadata"]["user_id"])
        expires = datetime.datetime.now() + datetime.timedelta(days=30)
        set_subscription_db(user_id, expires)
        await bot.send_message(user_id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π üéâ", reply_markup=main_menu_customer)
    return {"status": "ok"}

@app.get("/")
async def root():
    return {"status": "WorkNadoJobBot —Ä–∞–±–æ—Ç–∞–µ—Ç üöÄ"}

async def main():
    loop = asyncio.get_event_loop()
    loop.create_task(dp.start_polling(bot))
    config = uvicorn.Config(app, host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
    server = uvicorn.Server(config)
    await server.serve()

if __name__ == "__main__":
    asyncio.run(main())

