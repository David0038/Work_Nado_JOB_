import os
import asyncio
import datetime
import requests
from aiogram import Bot, Dispatcher, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, Message
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from fastapi import FastAPI, Request
import uvicorn
import httpx

API_TOKEN = "8394026180:AAEHHKn30U7H_zdHWGu_cB2h9054lmo1eag"
YOOKASSA_SHOP_ID = "test_1179735"
YOOKASSA_SECRET = "test_J8y43wGt8go7fyMtkNNWUGlMdTmVtV41bd82cVmMpQk"

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
app = FastAPI()

roles = {}
subscriptions = {}

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìã –í–∞–∫–∞–Ω—Å–∏–∏")],
        [KeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")],
        [KeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")]
    ],
    resize_keyboard=True
)

def has_active_subscription(user_id: int) -> bool:
    return subscriptions.get(user_id, datetime.datetime.min) > datetime.datetime.now()

@dp.message(Command("start"))
async def start(message: Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üëî –Ø –∑–∞–∫–∞–∑—á–∏–∫")],
            [KeyboardButton(text="üë§ –Ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WorkNadoJobBot!\n\n"
        "üíº –ó–¥–µ—Å—å –∑–∞–∫–∞–∑—á–∏–∫–∏ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –Ω–∞—Ö–æ–¥—è—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞.\n\n"
        "üîπ *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏* ‚Äî –º–æ–≥—É—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏.\n"
        "üîπ *–ó–∞–∫–∞–∑—á–∏–∫–∏* ‚Äî –ø—É–±–ª–∏–∫—É—é—Ç –∑–∞–∫–∞–∑—ã —Å –ø–æ–¥–ø–∏—Å–∫–æ–π 1000 ‚ÇΩ / 30 –¥–Ω–µ–π.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –≤—ã üëá",
        reply_markup=kb
    )

@dp.message(F.text == "üëî –Ø –∑–∞–∫–∞–∑—á–∏–∫")
async def choose_customer(message: Message):
    roles[message.from_user.id] = "customer"
    await message.answer(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å: üëî –ó–∞–∫–∞–∑—á–∏–∫.\n\n"
        "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã –∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –æ—Ç–∫–ª–∏–∫–∏, –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É ‚Äî 1000 ‚ÇΩ / 30 –¥–Ω–µ–π.",
        reply_markup=main_menu
    )

@dp.message(F.text == "üë§ –Ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å")
async def choose_worker(message: Message):
    roles[message.from_user.id] = "worker"
    await message.answer(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å: üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å.\n–í—ã –º–æ–∂–µ—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏.",
        reply_markup=main_menu
    )

@dp.message(F.text == "üìã –í–∞–∫–∞–Ω—Å–∏–∏")
async def show_vacancies(message: Message):
    role = roles.get(message.from_user.id)
    if role == "customer" and not has_active_subscription(message.from_user.id):
        await message.answer("‚ùå –î–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 1000 ‚ÇΩ.", reply_markup=main_menu)
        return
    await message.answer(
        "‚úÖ –°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π:\n"
        "1Ô∏è‚É£ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ Telegram-–±–æ—Ç–∞ ‚Äî 10 000 ‚ÇΩ\n"
        "2Ô∏è‚É£ –î–∏–∑–∞–π–Ω –ª–æ–≥–æ—Ç–∏–ø–∞ ‚Äî 5 000 ‚ÇΩ\n"
        "3Ô∏è‚É£ –ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥ ‚Äî 3 000 ‚ÇΩ"
    )

@dp.message(F.text == "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
async def create_order(message: Message):
    if roles.get(message.from_user.id) != "customer":
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—á–∏–∫–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã.")
        return
    if not has_active_subscription(message.from_user.id):
        await message.answer("‚ùå –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ (1000 ‚ÇΩ).", reply_markup=main_menu)
        return
    await message.answer("‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.\n\n(–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.)")

@dp.message(F.text == "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
async def buy_subscription(message: Message):
    if roles.get(message.from_user.id) != "customer":
        await message.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω—É–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—á–∏–∫–∞–º.")
        return

    amount = "1000.00"
    data = {
        "amount": {"value": amount, "currency": "RUB"},
        "capture": True,
        "description": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ WorkNadoJobBot (30 –¥–Ω–µ–π)",
        "confirmation": {"type": "redirect", "return_url": "https://t.me/WorkNadoJobBot"},
        "metadata": {"user_id": message.from_user.id}
    }

    response = requests.post(
        "https://api.yookassa.ru/v3/payments",
        auth=(YOOKASSA_SHOP_ID, YOOKASSA_SECRET),
        json=data,
        headers={"Content-Type": "application/json"}
    )

    payment = response.json()
    if "confirmation" not in payment:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.\n\n–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\n{payment}")
        return

    confirmation_url = payment["confirmation"]["confirmation_url"]
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –ÆKassa", url=confirmation_url)]]
    )

    await message.answer(
        f"üí∞ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 30 –¥–Ω–µ–π ‚Äî {amount} ‚ÇΩ.\n\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ‚úÖ",
        reply_markup=kb
    )

@app.post("/yookassa/callback")
async def yookassa_callback(request: Request):
    data = await request.json()
    if data.get("event") == "payment.succeeded":
        user_id = int(data["object"]["metadata"]["user_id"])
        subscriptions[user_id] = datetime.datetime.now() + datetime.timedelta(days=30)
        await bot.send_message(user_id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π üéâ")
    return {"status": "ok"}

@app.get("/")
async def root():
    return {"status": "WorkNadoJobBot —Ä–∞–±–æ—Ç–∞–µ—Ç üöÄ"}

@app.get("/ping")
async def ping():
    return {"status": "alive"}

async def ping_self():
    while True:
        try:
            async with httpx.AsyncClient() as client:
                await client.get("https://work-nado-job.onrender.com/ping")
        except:
            pass
        await asyncio.sleep(300)

async def main():
    loop = asyncio.get_event_loop()
    loop.create_task(dp.start_polling(bot))
    loop.create_task(ping_self())
    config = uvicorn.Config(app, host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
    server = uvicorn.Server(config)
    await server.serve()

if __name__ == "__main__":
    asyncio.run(main())
